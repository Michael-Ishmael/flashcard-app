{"version":3,"file":"deck-set.service.js","sourceRoot":"","sources":["../../Users/scorpio/Dev/Projects/flashcard-app/production_ui/dev/tmp/broccoli_type_script_compiler-input_base_path-3oYV6wsF.tmp/0/src/app/deck-sets/deck-set.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { DeckSet } from './deck-set';\nimport {Http, Response, Headers} from \"@angular/http\";\nimport 'rxjs/add/operator/toPromise';\nimport {Observable} from \"rxjs/Rx\";\n\ninterface IApiSet{\n    deck_id:number,\n    set_id:number,\n    name:string,\n    icon?:string,\n    display_order:number\n}\n\n@Injectable()\nexport class DeckSetService {\n\n    private setsUrl = 'http://localhost:8000/prod/sets/';\n    private decksUrl = 'http://localhost:8000/prod/decks/';\n\n    constructor(private http: Http) { }\n\n    getDeckSets(setId:number = -1): Observable<DeckSet[]> {\n        var url:string;\n        if(setId > -1){\n            url = `${this.decksUrl}?set_id=${setId}`;\n        } else {\n            url = this.setsUrl;\n        }\n        return this.http.get(url)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    save(deckSet: DeckSet, asNew:boolean = false): Observable<DeckSet>  {\n        if (asNew) {\n            return this.post(deckSet);\n        }\n        return this.put(deckSet);\n    }\n\n    delete(deckSet: DeckSet): Observable<DeckSet> {\n        let headers = new Headers({\n            //'Content-Type': 'application/json',\n            'Authorization': 'Basic YWRtaW46cGFzc3dvcmQxMjM='});\n\n        return this.http\n            .delete(this.setsUrl + deckSet.id + '/', {headers: headers})\n            .catch(this.handleError);\n    }\n\n    // Add new DeckSet\n    private post(deckSet: DeckSet): Observable<DeckSet> {\n        let headers = new Headers({\n            'Content-Type': 'application/json',\n            'Authorization': 'Basic YWRtaW46cGFzc3dvcmQxMjM='});\n        var item = DeckSetService.deckSetToApiSet(deckSet);\n\t\t\t\tvar url = deckSet.setId ? this.decksUrl : this.setsUrl;\n        return this.http\n            .post(url, JSON.stringify(item), {headers: headers})\n            .map(function(res){\n                var item = res.json();\n                return DeckSetService.apiSetToDeckSet(item as IApiSet)\n            })\n            .catch(this.handleError);\n    }\n\n    // Update existing DeckSets\n    private put(deckSet: DeckSet): Observable<DeckSet> {\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\t\t\t\tvar url = deckSet.setId ? this.decksUrl : this.setsUrl;\n        url = `${url}${deckSet.id}/`;\n        var item = DeckSetService.deckSetToApiSet(deckSet);\n        return this.http\n            .put(url, JSON.stringify(item), {headers: headers})\n            .map(() => deckSet)\n            .catch(this.handleError);\n    }\n\n    private extractData(res: Response):DeckSet[] {\n        let body = res.json();\n        return body.map(DeckSetService.apiSetToDeckSet);\n    }\n\n    private static apiSetToDeckSet(r:IApiSet):DeckSet{\n        return new DeckSet(r.deck_id ? r.deck_id : r.set_id,  r.deck_id ? r.set_id : null, r.name, r.icon, r.display_order);\n    }\n\n    private static deckSetToApiSet(d:DeckSet):IApiSet{\n        var apiSet = {set_id: d.setId ? d.setId : d.id , name:d.name, display_order:d.displayOrder, deck_id: d.setId ? d.id : null} as IApiSet;\n        if(d.icon) apiSet.icon = d.icon;\n\t\t\treturn apiSet;\n    }\n\n    private handleError(error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        // We'd also dig deeper into the error to get a better message\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n\n}\n\n"]}