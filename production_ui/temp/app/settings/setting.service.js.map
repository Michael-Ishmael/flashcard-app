{"version":3,"file":"setting.service.js","sourceRoot":"","sources":["../../Users/scorpio/Dev/Projects/flashcard-app/production_ui/dev/tmp/broccoli_type_script_compiler-input_base_path-3oYV6wsF.tmp/0/src/app/settings/setting.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Setting } from './setting';\nimport {Http, Response, Headers} from \"@angular/http\";\nimport 'rxjs/add/operator/toPromise';\nimport {Observable} from \"rxjs/Rx\";\n\n@Injectable()\nexport class SettingService {\n\n    private settingsUrl = 'http://localhost:8000/prod/config/';  // URL to web api\n\n    constructor(private http: Http) { }\n\n    getSettings(): Observable<Setting[]> {\n        return this.http.get(this.settingsUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    save(setting: Setting, asNew:boolean = false): Observable<Setting>  {\n        if (asNew) {\n            return this.post(setting);\n        }\n        return this.put(setting);\n    }\n\n    delete(setting: Setting): Observable<Setting> {\n        let headers = new Headers({\n            //'Content-Type': 'application/json',\n            'Authorization': 'Basic YWRtaW46cGFzc3dvcmQxMjM='});\n\n        return this.http\n            .delete(this.settingsUrl + setting.settingKey + '/', {headers: headers})\n            .catch(this.handleError);\n    }\n\n    // Add new Setting\n    private post(setting: Setting): Observable<Setting> {\n        let headers = new Headers({\n            'Content-Type': 'application/json',\n            'Authorization': 'Basic YWRtaW46cGFzc3dvcmQxMjM='});\n\n        return this.http\n            .post(this.settingsUrl, JSON.stringify(setting), {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    // Update existing Settings\n    private put(setting: Setting): Observable<Setting> {\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n\n        let url = `${this.settingsUrl}/${setting.settingKey}`;\n\n        return this.http\n            .put(url, JSON.stringify(setting), {headers: headers})\n            .map(() => setting)\n            .catch(this.handleError);\n    }\n\n    private extractData(res: Response) {\n        let body = res.json();\n        return body;\n    }\n\n    private handleError(error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        // We'd also dig deeper into the error to get a better message\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n\n}\n\n"]}