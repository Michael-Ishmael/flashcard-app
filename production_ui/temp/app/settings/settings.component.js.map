{"version":3,"file":"settings.component.js","sourceRoot":"","sources":["../../Users/scorpio/Dev/Projects/flashcard-app/production_ui/dev/tmp/broccoli_type_script_compiler-input_base_path-3oYV6wsF.tmp/0/src/app/settings/settings.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAGlD,gCAA6B,mBAAmB,CAAC,CAAA;AACjD,uCAAmC,0BAA0B,CAAC,CAAA;AAQ9D;IAII,2BACY,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;IACvC,CAAC;IAEH,uCAAW,GAAX;QAAA,iBAMC;QALG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;aAC5B,SAAS,CACN,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB,EACpC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,GAAQ,KAAK,EAA9B,CAA8B,CAC1C,CAAC;IACV,CAAC;IAED,kCAAM,GAAN;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,4CAAgB,GAAhB,UAAiB,OAAe;QAC5B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IAED,0CAAc,GAAd,UAAe,OAAe;QAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IAC5B,CAAC;IAED,4CAAgB,GAAhB,UAAiB,OAAe;QAAhC,iBAGC;QAFG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;aAC9B,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAA3B,CAA2B,CAAC,CAAC;IACrD,CAAC;IAEO,yCAAa,GAArB,UAAsB,OAAe;QAEjC,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;QACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5C,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACnC,EAAE,CAAA,CAAC,WAAW,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,CAAA,CAAC;gBAC7C,aAAa,GAAG,CAAC,CAAC;gBAClB,KAAK,CAAC;YACV,CAAC;QACL,CAAC;QACD,EAAE,CAAA,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAA,CAAC;YACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAA;QAC1C,CAAC;IAEL,CAAC;IAGD,iDAAqB,GAArB,UAAsB,OAAe;QACjC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IAEO,gCAAI,GAAZ,UAAa,OAAe,EAAE,KAAmB;QAAjD,iBAMC;QAN6B,qBAAmB,GAAnB,aAAmB;QAC7C,EAAE,CAAA,CAAC,KAAK,CAAC;YAAC,IAAI,CAAC,UAAU,GAAE,KAAK,CAAC;QACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;aACnC,SAAS,CAAC,UAAA,OAAO;YACd,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;QAA3B,CAA2B,CAC9B,CAAC;IACV,CAAC;IAID,oCAAQ,GAAR;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAxEL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,sCAAsC;YACnD,SAAS,EAAG,CAAC,qCAAqC,CAAC;YACnD,UAAU,EAAE,CAAC,6CAAoB,CAAC;SACrC,CAAC;;yBAAA;IAqEF,wBAAC;AAAD,CAAC,AApED,IAoEC;AApEY,yBAAiB,oBAoE7B,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\n//import { Router }            from '@angular/router';\nimport { Setting }                from './setting';\nimport {SettingService} from \"./setting.service\";\nimport {SettingFormComponent} from \"./setting-form.component\";\n\n@Component({\n    selector: 'app-settings',\n    templateUrl: 'app/settings/settings.component.html',\n    styleUrls:  ['app/settings/settings.component.css'],\n    directives: [SettingFormComponent]\n})\nexport class SettingsComponent implements OnInit {\n    showAddNew:boolean;\n    settings:Setting[];\n    errorMessage:any;\n    constructor(\n        private settingService:SettingService\n    ){}\n\n    getSettings(){\n        this.settingService.getSettings()\n            .subscribe(\n                settings => this.settings = settings,\n                error => this.errorMessage = <any>error\n            );\n    }\n    \n    addNew(){\n        this.showAddNew = true;\n    }\n    \n    onSettingUpdated(setting:Setting){\n        this.save(setting);\n    }\n    \n    onSettingAdded(setting:Setting){\n        this.save(setting, true)\n    }\n\n    onSettingDeleted(setting:Setting){\n        this.settingService.delete(setting)\n            .subscribe(r => this.removeSetting(setting));\n    }\n\n    private removeSetting(setting:Setting):void {\n\n        var indexToDelete = -1;\n        for (var i = 0; i < this.settings.length; i++) {\n            var loopSetting = this.settings[i];\n            if(loopSetting.settingKey == setting.settingKey){\n                indexToDelete = i;\n                break;\n            }\n        }\n        if(indexToDelete > -1){\n            this.settings.splice(indexToDelete, 1)\n        }\n\n    }\n\n\n    onAddSettingCancelled(setting:Setting){\n        this.showAddNew = false;\n    }\n\n    private save(setting:Setting, asNew:boolean=false){\n        if(asNew) this.showAddNew =false;\n        this.settingService.save(setting, asNew)\n            .subscribe(setting =>\n                this.settings.push(setting)\n            );\n    }\n    \n    \n\n    ngOnInit() {\n        this.getSettings();\n    }\n\n}"]}