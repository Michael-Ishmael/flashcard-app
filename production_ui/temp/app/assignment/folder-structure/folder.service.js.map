{"version":3,"file":"folder.service.js","sourceRoot":"","sources":["../../../Users/scorpio/Dev/Projects/flashcard-app/production_ui/dev/tmp/broccoli_type_script_compiler-input_base_path-3oYV6wsF.tmp/0/src/app/assignment/folder-structure/folder.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAE3C,qBAAsC,eAAe,CAAC,CAAA;AACtD,QAAO,6BAA6B,CAAC,CAAA;AACrC,mBAAyB,SAAS,CAAC,CAAA;AAInC;IAII,uBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAFtB,eAAU,GAAG,qCAAqC,CAAC,CAAE,iBAAiB;IAE5C,CAAC;IAEnC,qCAAa,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;aAChC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,mCAAW,GAAnB,UAAoB,GAAa;QAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,mCAAW,GAAnB,UAAoB,KAAU;QAC1B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YACxC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC5E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAzBL;QAAC,iBAAU,EAAE;;qBAAA;IA2Bb,oBAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,qBAAa,gBA0BzB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Fso } from './fso';\nimport {Http, Response, Headers} from \"@angular/http\";\nimport 'rxjs/add/operator/toPromise';\nimport {Observable} from \"rxjs/Rx\";\n\n\n@Injectable()\nexport class FolderService {\n\n    private foldersUrl = 'http://localhost:8000/prod/folders/';  // URL to web api\n\n    constructor(private http: Http) { }\n\n    getFolderRoot(): Observable<Fso> {\n        return this.http.get(this.foldersUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    private extractData(res: Response):Fso {\n        let body = res.json();\n        return body;\n    }\n\n    private handleError(error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        // We'd also dig deeper into the error to get a better message\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n\n}"]}