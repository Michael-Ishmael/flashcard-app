{"version":3,"file":"deck-sets.component.js","sourceRoot":"","sources":["../../Users/scorpio/Dev/Projects/flashcard-app/production_ui/dev/tmp/broccoli_type_script_compiler-input_base_path-3oYV6wsF.tmp/0/src/app/deck-sets/deck-sets.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit, Input, Output, EventEmitter, SimpleChange} from '@angular/core';\nimport {DeckSetService} from \"./deck-set.service\";\nimport {DeckSet} from \"./deck-set\";\nimport {BUTTON_DIRECTIVES} from 'ng2-bootstrap';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-deck-sets',\n  templateUrl: 'deck-sets.component.html',\n  styleUrls: ['deck-sets.component.css'],\n  directives: [BUTTON_DIRECTIVES]\n})\nexport class DeckSetsComponent implements OnInit {\n  @Input() filterId:number = 0;\n  @Output() onItemSelected = new EventEmitter<DeckSet>();\n  deckSets:DeckSet[];\n  errorMessage:any;\n\n  selectedDeckSet:DeckSet;\n  editing:boolean;\n  creating:boolean;\n\n\n  constructor(\n      private deckSetService:DeckSetService\n  ) {}\n\n  getDeckSets(){\n    if(this.filterId == 0){\n      this.deckSets = [];\n      return;\n    }\n    this.deckSetService.getDeckSets(this.filterId)\n        .subscribe(\n            sets => this.deckSets = sets,\n            error => this.errorMessage = <any>error\n        )\n  }\n\n  selectDeckSet(deckSet:DeckSet){\n    this.selectedDeckSet = deckSet;\n    this.onItemSelected.emit(deckSet);\n  }\n\n  addNewDeckSet(){\n\n    this.selectedDeckSet = new DeckSet(-1, this.filterId > 0 ? this.filterId : null, '', '', this.deckSets.length);\n    this.creating = true;\n    this.editing =true;\n    this.deckSets.push(this.selectedDeckSet);\n  }\n\n  deleteDeckSet(deckSet:DeckSet){\n    this.deckSetService.delete(deckSet)\n      .subscribe(r => this.removeDeckSet(deckSet));\n\n  }\n\n  private removeDeckSet(deckSet:DeckSet):void {\n\n    var indexToDelete = -1;\n    for (var i = 0; i < this.deckSets.length; i++) {\n      var loopSetting = this.deckSets[i];\n      if(loopSetting.id == deckSet.id){\n        indexToDelete = i;\n        break;\n      }\n    }\n    if(indexToDelete > -1){\n      this.deckSets.splice(indexToDelete, 1)\n    }\n\n  }\n\n  cancelCreate(){\n    this.deckSets.pop();\n    this.creating = false;\n    this.editing = false;\n    this.selectedDeckSet = null;\n  }\n\n  editDeckSet(deckSet:DeckSet){\n    if(this.selectedDeckSet !== deckSet){\n       this.selectDeckSet(deckSet)\n    }\n    this.editing = true;\n  }\n\n  saveDeckSet(){\n    if(this.selectedDeckSet){\n      this.deckSetService.save(this.selectedDeckSet, this.creating)\n          .subscribe(s => this.saveIfNew(s, this))\n    }\n  }\n\n  private saveIfNew(savedSet:DeckSet, comp:DeckSetsComponent){\n    if(comp.creating){\n      this.removeDeckSet(comp.selectedDeckSet);\n      this.deckSets.push(savedSet);\n      this.onItemSelected.emit(savedSet);\n      comp.creating = false;\n    }\n    comp.editing = false;\n  }\n\n  ngOnInit() {\n    this.getDeckSets()\n  }\n\n  ngOnChanges(changes:{[propName:string]:SimpleChange}) {\n    if(changes.hasOwnProperty(\"filterId\")){\n      this.getDeckSets()\n    }\n  }\n\n}\n"]}