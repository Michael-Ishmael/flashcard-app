{"version":3,"file":"setting-form.component.js","sourceRoot":"","sources":["../../Users/scorpio/Dev/Projects/flashcard-app/production_ui/dev/tmp/broccoli_type_script_compiler-input_base_path-3oYV6wsF.tmp/0/src/app/settings/setting-form.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA6D,eAAe,CAAC,CAAA;AAE7E,wBAA2B,WAAW,CAAC,CAAA;AAOvC;IAAA;QAEc,cAAS,GAAG,IAAI,mBAAY,EAAW,CAAC;QACxC,mBAAc,GAAG,IAAI,mBAAY,EAAW,CAAC;QAC7C,cAAS,GAAG,IAAI,mBAAY,EAAW,CAAC;QACxC,gBAAW,GAAG,IAAI,mBAAY,EAAW,CAAC;QAGpD,cAAS,GAAG,KAAK,CAAC;IA6BtB,CAAC;IA3BG,uCAAQ,GAAR;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;YACX,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;IACL,CAAC;IAED,uCAAQ,GAAR;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACnC,CAAC;IAED,uCAAQ,GAAR;QACI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACrC,CAAC;IAED,uCAAQ,GAAR;QACI,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,IAAI,iBAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;QACpC,CAAC;IACL,CAAC;IAGD,sBAAI,4CAAU;QADd,oCAAoC;aACpC,cAAmB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAnCvD;QAAC,YAAK,EAAE;;uDAAA;IACR;QAAC,aAAM,EAAE;;2DAAA;IACT;QAAC,aAAM,EAAE;;gEAAA;IACT;QAAC,aAAM,EAAE;;2DAAA;IACT;QAAC,aAAM,EAAE;;6DAAA;IAVb;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,0CAA0C;YACvD,SAAS,EAAE,CAAC,yCAAyC,CAAC;SACzD,CAAC;;4BAAA;IAsCF,2BAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,4BAAoB,uBAqChC,CAAA","sourcesContent":["import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\nimport { NgForm }    from '@angular/common';\nimport { Setting }    from './setting';\n\n@Component({\n    selector: 'setting-form',\n    templateUrl: 'app/settings/setting-form.component.html',\n    styleUrls: ['app/settings/setting-form.component.css']\n})\nexport class SettingFormComponent implements OnInit {\n    @Input() model:Setting;\n    @Output() onUpdated = new EventEmitter<Setting>();\n    @Output() onSettingAdded = new EventEmitter<Setting>();\n    @Output() onDeleted = new EventEmitter<Setting>();\n    @Output() onCancelled = new EventEmitter<Setting>();\n    isNew:boolean;\n\n    submitted = false;\n\n    onSubmit() { \n        this.submitted = true;\n        if(this.isNew){\n            this.onSettingAdded.emit(this.model);\n        } else {\n            this.onUpdated.emit(this.model);\n        }\n    }\n\n    onDelete() {\n        this.submitted = true;\n        this.onDeleted.emit(this.model)\n    }\n\n    onCancel() {\n        this.onCancelled.emit(this.model)\n    }\n\n    ngOnInit():any {\n        if(!this.model) {\n            this.isNew = true;\n            this.model = new Setting('', '')\n        }\n    }\n\n    // TODO: Remove this when we're done\n    get diagnostic() { return JSON.stringify(this.model); }\n}\n"]}