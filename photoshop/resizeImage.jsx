#target photoshop/*var src = '/Users/scorpio/Dev/Projects/flashcard-app/media/media/images/domestic/chicken/chicken2.jpg';var tgt = '/Users/scorpio/Dev/Projects/flashcard-app/media/media/img/chicken2.jpg';var w = '800'var h = '600'main([src, tgt, w, h])*/function main(argv){    //var test_val = "abc"    try {        var res = process(argv[0], argv[1], argv[2], argv[3]);         return res                    }    catch(ex){        console.log(ex)        return ex.message    }}function process(srcPath, targetPath, maxWidthStr, maxHeightStr){            try {            var file = new File(srcPath);            doc = app.open(file);        }                catch(ex) {            err = 2;        }            try {            app.preferences.rulerUnits = Units.PIXELS;                docWidth = (1.0 * app.activeDocument.width).as('px')             docHeight = (1.0 * app.activeDocument.height).as('px')        }                catch(ex) {            err = 3;        }                         try {            var targetWidth = Number(maxWidthStr);            var targetHeight = Number(maxHeightStr);            ResizeTheImage (targetWidth, targetHeight);        }                catch(ex) {            err = 5;        }                try {            var saveFile = new File(targetPath, 'w');            err = SaveJPEG (saveFile, 2);        }        catch(ex) {            err = ex.message;        }            doc.close (SaveOptions.DONOTSAVECHANGES) ;       return targetPath;} function SaveJPEG(saveFile, jpegQuality) {    try {                    jpgSaveOptions = new JPEGSaveOptions();        jpgSaveOptions.embedColorProfile = true;        jpgSaveOptions.formatOptions = FormatOptions.STANDARDBASELINE;        jpgSaveOptions.matte = MatteType.NONE;        jpgSaveOptions.quality = jpegQuality; //1-12        activeDocument.saveAs(saveFile, jpgSaveOptions, true,Extension.LOWERCASE);                        } catch(ex){        return ex.message;    }        return 0;}function ResizeTheImage(width, height) {	var oldPref = app.preferences.rulerUnits;	var docWidth;	var docHeight;	var docRatio;	var newWidth;	var newHeight;	var resolution = app.activeDocument.resolution;	var limit = false; //sizeInfo.limit;    app.preferences.rulerUnits = Units.PIXELS; // save old preferences	// original width, height	docWidth = (1.0 * app.activeDocument.width * resolution) / 72.0; // decimal inches assuming 72 dpi (used in docRatio)	docHeight = (1.0 * app.activeDocument.height * resolution) / 72.0; // ditto	if (docWidth < 1.0 || docHeight < 1.0)		return true; // error	if (width < 1 || height < 1)		return true; // error	if ( limit && ( app.activeDocument.width.as('px') <= width && app.activeDocument.height.as('px') <= height ) ){		app.preferences.rulerUnits = oldPref; // restore old prefs		isCancelled = false; // if get here, definitely executed		return false; // no error	}	docRatio = docWidth / docHeight; // decimal ratio of original width/height	newWidth = width;	newHeight = ((1.0 * width) / docRatio); // decimal calc	if (newHeight > height) {		newWidth = docRatio * height; // decimal calc		newHeight = height;	}    // resize the image using a good conversion method while keeping the pixel resolution    // and the aspect ratio the same    app.activeDocument.resizeImage(newWidth, newHeight, resolution, ResampleMethod.BICUBIC);    app.preferences.rulerUnits = oldPref; // restore old prefs	isCancelled = false; // if get here, definitely executed	return false; // no error}